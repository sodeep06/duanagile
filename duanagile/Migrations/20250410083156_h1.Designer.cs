// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using duanagile.Context;

#nullable disable

namespace duanagile.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250410083156_h1")]
    partial class h1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("duanagile.Models.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CartID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("duanagile.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemID"));

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<int>("FoodItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemID");

                    b.HasIndex("CartID");

                    b.HasIndex("FoodItemID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("duanagile.Models.Combo", b =>
                {
                    b.Property<int>("ComboID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ComboID");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            ComboID = 1,
                            Description = "Bao gồm bánh mì, trứng chiên, sữa tươi",
                            ImageURL = "/images/buasang1.jpg",
                            Name = "Combo Bữa Sáng",
                            Price = 99000m
                        },
                        new
                        {
                            ComboID = 2,
                            Description = "Cơm gà, cánh gà, Kim chi.",
                            ImageURL = "/images/buatrua.jpg",
                            Name = "Combo Trưa Nhanh",
                            Price = 129000m
                        },
                        new
                        {
                            ComboID = 3,
                            Description = "cánh gà, khoai tây chiên, pepsi, bánh rán.",
                            ImageURL = "/images/dacbiet.jpg",
                            Name = "Combo Đặc Biệt",
                            Price = 199000m
                        });
                });

            modelBuilder.Entity("duanagile.Models.ComboItem", b =>
                {
                    b.Property<int>("ComboItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboItemID"));

                    b.Property<int>("ComboID")
                        .HasColumnType("int");

                    b.Property<int>("FoodItemID")
                        .HasColumnType("int");

                    b.HasKey("ComboItemID");

                    b.HasIndex("ComboID");

                    b.HasIndex("FoodItemID");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            ComboItemID = 1,
                            ComboID = 1,
                            FoodItemID = 1
                        },
                        new
                        {
                            ComboItemID = 2,
                            ComboID = 1,
                            FoodItemID = 2
                        },
                        new
                        {
                            ComboItemID = 3,
                            ComboID = 2,
                            FoodItemID = 3
                        },
                        new
                        {
                            ComboItemID = 4,
                            ComboID = 2,
                            FoodItemID = 4
                        },
                        new
                        {
                            ComboItemID = 5,
                            ComboID = 3,
                            FoodItemID = 5
                        },
                        new
                        {
                            ComboItemID = 6,
                            ComboID = 3,
                            FoodItemID = 6
                        });
                });

            modelBuilder.Entity("duanagile.Models.FoodItem", b =>
                {
                    b.Property<int>("FoodItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodItemID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FoodItemID");

                    b.ToTable("FoodItems");

                    b.HasData(
                        new
                        {
                            FoodItemID = 1,
                            Category = "Dạng sữa",
                            Description = "Kem chống nắng dạng sữa, không thấm nước, phù hợp da dầu.",
                            ImageURL = "/images/sp1.jpg",
                            Ingredients = "Zinc Oxide, Octocrylene, Hyaluronic Acid",
                            Name = "Anessa Perfect UV Sunscreen SPF50+",
                            Price = 350000m
                        },
                        new
                        {
                            FoodItemID = 2,
                            Category = "Dạng kem",
                            Description = "Kem chống nắng cho da nhạy cảm, thẩm thấu nhanh, không gây bết dính.",
                            ImageURL = "/images/sp2.jpg",
                            Ingredients = "Mexoryl SX/XL, Glycerin, Vitamin E",
                            Name = "La Roche-Posay Anthelios XL SPF50+",
                            Price = 420000m
                        },
                        new
                        {
                            FoodItemID = 3,
                            Category = "Dạng gel",
                            Description = "Kết cấu nhẹ như nước, thấm nhanh, không gây bí da.",
                            ImageURL = "/images/sp3.jpg",
                            Ingredients = "Alcohol, Hyaluronic Acid, Royal Jelly Extract",
                            Name = "Biore UV Aqua Rich Watery Essence SPF50+",
                            Price = 230000m
                        },
                        new
                        {
                            FoodItemID = 4,
                            Category = "Nâng tone",
                            Description = "Kem chống nắng nâng tone, phù hợp dùng làm lớp lót makeup.",
                            ImageURL = "/images/sp4.jpg",
                            Ingredients = "Vitamin C, Lavender Extract, Hyaluronic Acid",
                            Name = "Skin Aqua Tone Up UV Essence SPF50+",
                            Price = 290000m
                        },
                        new
                        {
                            FoodItemID = 5,
                            Category = "Dạng kem",
                            Description = "Chống nắng kiêm dưỡng da, phù hợp da hỗn hợp và da dầu.",
                            ImageURL = "/images/sp5.jpg",
                            Ingredients = "Mexoryl XL, Vitamin E, Thermal Water",
                            Name = "Vichy Capital Soleil SPF50+",
                            Price = 480000m
                        },
                        new
                        {
                            FoodItemID = 6,
                            Category = "Dạng kem",
                            Description = "Kem chống nắng nhẹ dịu chiết xuất trà xanh, phù hợp cho da thường và da khô.",
                            ImageURL = "/images/sp6.jpg",
                            Ingredients = "Green Tea Extract, Titanium Dioxide, Centella Asiatica",
                            Name = "Innisfree Daily UV Defense SPF36",
                            Price = 190000m
                        });
                });

            modelBuilder.Entity("duanagile.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("duanagile.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("FoodItemID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("FoodItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("duanagile.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Address = "123 Admin Lane",
                            DateOfBirth = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dhieu6503@gmail.com",
                            Name = "Admin",
                            PasswordHash = "12345678",
                            Phone = "0123456789",
                            Role = "Admin"
                        },
                        new
                        {
                            UserID = 2,
                            Address = "456 Customer Street",
                            DateOfBirth = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sati@example.com",
                            Name = "sati",
                            PasswordHash = "hashedpassword456",
                            Phone = "0987654321",
                            Role = "Customer"
                        },
                        new
                        {
                            UserID = 3,
                            Address = "789 Guest Avenue",
                            Email = "guest@example.com",
                            Name = "Guest User",
                            PasswordHash = "hashedpassword789",
                            Phone = "1112223333",
                            Role = "Guest"
                        });
                });

            modelBuilder.Entity("duanagile.Models.CartItem", b =>
                {
                    b.HasOne("duanagile.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("duanagile.Models.FoodItem", "FoodItem")
                        .WithMany()
                        .HasForeignKey("FoodItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("FoodItem");
                });

            modelBuilder.Entity("duanagile.Models.ComboItem", b =>
                {
                    b.HasOne("duanagile.Models.Combo", "Combo")
                        .WithMany("ComboItems")
                        .HasForeignKey("ComboID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("duanagile.Models.FoodItem", "FoodItem")
                        .WithMany("ComboItems")
                        .HasForeignKey("FoodItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("FoodItem");
                });

            modelBuilder.Entity("duanagile.Models.Order", b =>
                {
                    b.HasOne("duanagile.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("duanagile.Models.OrderDetail", b =>
                {
                    b.HasOne("duanagile.Models.FoodItem", "FoodItem")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("duanagile.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("duanagile.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("duanagile.Models.Combo", b =>
                {
                    b.Navigation("ComboItems");
                });

            modelBuilder.Entity("duanagile.Models.FoodItem", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("duanagile.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("duanagile.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
